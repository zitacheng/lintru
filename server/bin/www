#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
var mongoose = require('mongoose');
// var app = require('http').createServer(handler)

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
  *     DATABASE
  */


mongoose.connect('mongodb://localhost/linytu', {useNewUrlParser: true});

var db = mongoose.connection;

db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function() {
  console.log("SUCCESSFUL");

  var playerSchema = new mongoose.Schema({
    name: String,
    admin: Boolean,
    avatar: String,
    word: String,
    intru: Boolean
  });

  mongoose.model('Player', playerSchema);

  var gameeSchema = new mongoose.Schema({
    url: String,
    admin: Number,
    round: Number,
    timeThink: Number,
    timeVote: Number,
    lang: String,
    players: Number
  });

  mongoose.model('Game', gameeSchema);
});

/**
 *  Socket IO
 */

const io = require('socket.io')(server);
var shortid = require('shortid');


io.on('connection', (socket) => {

  //Add player
   socket.on('addPlayer', (name, avatar, admin) => {

      var id = shortid.generate();
      console.log(id)

      var Player = require('mongoose').model('Player');

      new Player({
        name: name,
        admin: admin,
        avatar: avatar,
        word: null,
        intru: false
      }).save(function (err, fluffy) {
        console.log("fluffy = ", fluffy);
        if (err)
          socket.emit('addPlayerSuccess', ({success: false, msg: "failede to save data"}));
        else
          socket.emit('addPlayerSuccess', ({success: true, id: "ngI6AVR6p"}));
      });;
   });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
