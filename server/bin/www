#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
var mongoose = require('mongoose');
// var app = require('http').createServer(handler)

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
  *     DATABASE
  */


mongoose.connect('mongodb://localhost/linytu', {useNewUrlParser: true});

var db = mongoose.connection;

db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function() {

  var playerSchema = new mongoose.Schema({
    name: String,
    admin: Boolean,
    avatar: String,
    word: String,
    intru: Boolean,
    lobbyKey: String
  });

  mongoose.model('Player', playerSchema);

  var gameSchema = new mongoose.Schema({
    url: String,
    round: Number,
    timeThink: Number,
    timeVote: Number,
    lang: String,
  });

  mongoose.model('Game', gameSchema);
});

/**
 *  Socket IO
 */

const io = require('socket.io')(server);
var shortid = require('shortid');

var allClients = [];

var globalData = {
  lobbyList: [],
  listPlayer: [],
};


io.on('connection', (socket) => {

  require('../socket')(socket, globalData, io);

  // Game.find({}, function(err, result){
  //   console.log("All Game = ", result)
  // });
  //
  // Player.find({}, function(err, result){
  //   console.log("All players = ", result)
  // });

  //Add player
   // socket.on('addPlayer', (name, avatar, key) => {

      // var id = shortid.generate();
      // console.log(id)

      //New player and New lobby
   //    if (!key) {
   //
   //      new Game({
   //        url: id,
   //        round: 4,
   //        timeThink: 30,
   //        timeVote: 30,
   //        lang: 'fr',
   //      }).save(function (err, theGame) {
   //        if (err) {
   //          console.log("ERR =", err)
   //          socket.emit('addPlayerSuccess', ({success: false, msg: "failede to create lobby"}));
   //        }
   //        else {
   //          new Player({
   //            name: name,
   //            admin: true,
   //            avatar: avatar,
   //            word: null,
   //            intru: false,
   //            lobbyKey: id
   //          }).save(function (err, thePlayer) {
   //              if (err)
   //                socket.emit('addPlayerSuccess', ({success: false, msg: "failede to save player"}));
   //              else {
   //                socket.emit('addPlayerSuccess', ({success: true, player: thePlayer}));
   //              }
   //          });
   //        }
   //      });
   //    }
   //    else { //player that join an existing lobby
   //      // Game.fint({ url: key}); //TODO check if the url is coorect by searching in lobby model
   //
   //      // Let's say the url is correct for now
   //      //Creating new player
   //      new Player({
   //        name: name,
   //        admin: false,
   //        avatar: avatar,
   //        word: null,
   //        intru: false,
   //        lobbyKey: key
   //      }).save(function (err, thePlayer) {
   //        if (err)
   //          socket.emit('addPlayerSuccess', ({success: false, msg: "failede to save player"}));
   //        else {
   //          Player.find({lobbyKey: key}, function(err, dataPlayers){
   //            if (!err) {
   //              socket.emit('addPlayerSuccess', ({success: true, player: thePlayer}));
   //              console.log("emit !!")
   //              socket.emit('getPlaysersSuccess', ({success: true, players: dataPlayers}));
   //            }
   //          });
   //        }
   //      });
   //    }
   //
   // });

   //Get player of lobby
    // socket.on('getPlayers', (key) => {
    //   Game.find({url: key}, function(err, dataGame){
    //       if (err || dataGame.length == 0) {
    //           console.log(err);
    //           socket.emit('getPlaysersSuccess', ({success: false, msg: "failede to find lobby"}));
    //       }
    //       else {
    //         //Now that the game exist find every player of this room
    //         Player.find({lobbyKey: key}, function(err, dataPlayers){
    //           if (err)
    //             socket.emit('getPlaysersSuccess', ({success: false, msg: "faile find Players"}));
    //           else
    //             socket.emit('getPlaysersSuccess', ({success: true, game: dataGame, players: dataPlayers}));
    //       });
    //     }
    //   })
    // });

});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
